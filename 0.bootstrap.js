(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "../pkg/conways.js":
/*!*************************!*\
  !*** ../pkg/conways.js ***!
  \*************************/
/*! exports provided: Cell, __wbg_alert_4dedbfaabe00f448, greet, __wbg_error_4bb6c2a97407129a, __wbg_new_59cb74e423758ede, __wbg_stack_558ba5917b466edd, __wbg_random_5c6d19f78283f331, __wbindgen_throw, Universe, __wbindgen_object_drop_ref */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Cell\", function() { return Cell; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_alert_4dedbfaabe00f448\", function() { return __wbg_alert_4dedbfaabe00f448; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"greet\", function() { return greet; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_error_4bb6c2a97407129a\", function() { return __wbg_error_4bb6c2a97407129a; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_new_59cb74e423758ede\", function() { return __wbg_new_59cb74e423758ede; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_stack_558ba5917b466edd\", function() { return __wbg_stack_558ba5917b466edd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_random_5c6d19f78283f331\", function() { return __wbg_random_5c6d19f78283f331; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return __wbindgen_throw; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Universe\", function() { return Universe; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_object_drop_ref\", function() { return __wbindgen_object_drop_ref; });\n/* harmony import */ var _conways_bg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./conways_bg */ \"../pkg/conways_bg.wasm\");\n\n\n/**\n* Cell enum, used to easially count nearby cells\n*/\nconst Cell = Object.freeze({ Dead:0,Alive:1, });\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== _conways_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint8Memory = new Uint8Array(_conways_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet passStringToWasm;\nif (typeof cachedTextEncoder.encodeInto === 'function') {\n    passStringToWasm = function(arg) {\n\n        let size = arg.length;\n        let ptr = _conways_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"](size);\n        let writeOffset = 0;\n        while (true) {\n            const view = getUint8Memory().subarray(ptr + writeOffset, ptr + size);\n            const { read, written } = cachedTextEncoder.encodeInto(arg, view);\n            arg = arg.substring(read);\n            writeOffset += written;\n            if (arg.length === 0) {\n                break;\n            }\n            ptr = _conways_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_realloc\"](ptr, size, size * 2);\n            size *= 2;\n        }\n        WASM_VECTOR_LEN = writeOffset;\n        return ptr;\n    };\n} else {\n    passStringToWasm = function(arg) {\n\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = _conways_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"](buf.length);\n        getUint8Memory().set(buf, ptr);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    };\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nfunction __wbg_alert_4dedbfaabe00f448(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n    alert(varg0);\n}\n/**\n* @param {string} arg0\n* @returns {void}\n*/\nfunction greet(arg0) {\n    const ptr0 = passStringToWasm(arg0);\n    const len0 = WASM_VECTOR_LEN;\n    try {\n        return _conways_bg__WEBPACK_IMPORTED_MODULE_0__[\"greet\"](ptr0, len0);\n\n    } finally {\n        _conways_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](ptr0, len0 * 1);\n\n    }\n\n}\n\nfunction __wbg_error_4bb6c2a97407129a(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n\n    varg0 = varg0.slice();\n    _conways_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](arg0, arg1 * 1);\n\n    console.error(varg0);\n}\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction __wbg_new_59cb74e423758ede() {\n    return addHeapObject(new Error());\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== _conways_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint32Memory = new Uint32Array(_conways_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint32Memory;\n}\n\nfunction __wbg_stack_558ba5917b466edd(ret, arg0) {\n\n    const retptr = passStringToWasm(getObject(arg0).stack);\n    const retlen = WASM_VECTOR_LEN;\n    const mem = getUint32Memory();\n    mem[ret / 4] = retptr;\n    mem[ret / 4 + 1] = retlen;\n\n}\n\nfunction __wbg_random_5c6d19f78283f331() {\n    return Math.random();\n}\n\nfunction __wbindgen_throw(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n}\n\nfunction freeUniverse(ptr) {\n\n    _conways_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_universe_free\"](ptr);\n}\n/**\n* Universe struct we use a linear vector instead of a double one\n*/\nclass Universe {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Universe.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeUniverse(ptr);\n    }\n\n    /**\n    * Create a new universe with a default size (i.e. 64 x 64) and pattern\n    * @returns {Universe}\n    */\n    static new() {\n        return Universe.__wrap(_conways_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_new\"]());\n    }\n    /**\n    * Clear universe\n    * @returns {void}\n    */\n    clear() {\n        return _conways_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_clear\"](this.ptr);\n    }\n    /**\n    * Clears universe and creates a new random state\n    * @returns {void}\n    */\n    random() {\n        return _conways_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_random\"](this.ptr);\n    }\n    /**\n    * Set a cell\n    * @param {number} arg0\n    * @param {number} arg1\n    * @param {boolean} arg2\n    * @returns {void}\n    */\n    set_cell(arg0, arg1, arg2) {\n        return _conways_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_cell\"](this.ptr, arg0, arg1, arg2);\n    }\n    /**\n    * Toggle a cell\n    * @param {number} arg0\n    * @param {number} arg1\n    * @returns {void}\n    */\n    toggle_cell(arg0, arg1) {\n        return _conways_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_toggle_cell\"](this.ptr, arg0, arg1);\n    }\n    /**\n    * Set the width of the universe.\n    *\n    * Resets all cells to the dead state.\n    * @param {number} arg0\n    * @returns {void}\n    */\n    set_width(arg0) {\n        return _conways_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_width\"](this.ptr, arg0);\n    }\n    /**\n    * Set the height of the universe.\n    *\n    * Resets all cells to the dead state.\n    * @param {number} arg0\n    * @returns {void}\n    */\n    set_height(arg0) {\n        return _conways_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_height\"](this.ptr, arg0);\n    }\n    /**\n    * Returns the width of the universe\n    * @returns {number}\n    */\n    width() {\n        return _conways_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_width\"](this.ptr);\n    }\n    /**\n    * Returns the height of the universe\n    * @returns {number}\n    */\n    height() {\n        return _conways_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_height\"](this.ptr);\n    }\n    /**\n    * Returns a pointer to the cells\n    * @returns {number}\n    */\n    cells() {\n        return _conways_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_cells\"](this.ptr);\n    }\n    /**\n    * Run a tick of the simulation\n    * @returns {void}\n    */\n    tick() {\n        return _conways_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_tick\"](this.ptr);\n    }\n    /**\n    * Import a file via a string\n    * @param {string} arg0\n    * @returns {void}\n    */\n    import_file(arg0) {\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        try {\n            return _conways_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_import_file\"](this.ptr, ptr0, len0);\n\n        } finally {\n            _conways_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](ptr0, len0 * 1);\n\n        }\n\n    }\n}\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction __wbindgen_object_drop_ref(i) { dropObject(i); }\n\n\n\n//# sourceURL=webpack:///../pkg/conways.js?");

/***/ }),

/***/ "../pkg/conways_bg.wasm":
/*!******************************!*\
  !*** ../pkg/conways_bg.wasm ***!
  \******************************/
/*! exports provided: memory, __wbg_universe_free, universe_new, universe_clear, universe_random, universe_set_cell, universe_toggle_cell, universe_set_width, universe_set_height, universe_width, universe_height, universe_cells, universe_tick, universe_import_file, greet, __wbindgen_malloc, __wbindgen_realloc, __wbindgen_free */
/***/ (function(module, exports, __webpack_require__) {

eval("\"use strict\";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.i];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n/* harmony import */ var m0 = __webpack_require__(/*! ./conways */ \"../pkg/conways.js\");\n\n\n// exec wasm module\nwasmExports[\"__webpack_init__\"]()\n\n//# sourceURL=webpack:///../pkg/conways_bg.wasm?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var conways_conways_bg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! conways/conways_bg */ \"../pkg/conways_bg.wasm\");\n/* harmony import */ var conways__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! conways */ \"../pkg/conways.js\");\n/*\n * Logistics\n */\n\n// Import the WebAssembly memory at the top of the file.\n\n\n\nconst CELL_SIZE = 10; // px\nconst GRID_COLOR = \"#333333\";\nconst DEAD_COLOR = \"#000000\";\nconst ALIVE_COLOR = \"#20C20E\";\n\n// Construct the universe, and get its width and height.\nconst universe = conways__WEBPACK_IMPORTED_MODULE_1__[\"Universe\"].new();\n\nlet width = universe.width();\nlet height = universe.height();\n\nlet animationId = null;\n\nconst isPaused = () => {\n  return animationId === null;\n};\n\nconst fps = new class {\n  constructor() {\n    this.fps = document.getElementById(\"fps\");\n    this.frames = [];\n    this.lastFrameTimeStamp = performance.now();\n  }\n\n  render() {\n    // Convert the delta time since the last frame render into a measure\n    // of frames per second.\n    const now = performance.now();\n    const delta = now - this.lastFrameTimeStamp;\n    this.lastFrameTimeStamp = now;\n    const fps = 1 / delta * 1000;\n\n    // Save only the latest 100 timings.\n    this.frames.push(fps);\n    if (this.frames.length > 100) {\n      this.frames.shift();\n    }\n\n    // Find the max, min, and mean of our 100 latest timings.\n    let min = Infinity;\n    let max = -Infinity;\n    let sum = 0;\n    for (let i = 0; i < this.frames.length; i++) {\n      sum += this.frames[i];\n      min = Math.min(this.frames[i], min);\n      max = Math.max(this.frames[i], max);\n    }\n    let mean = sum / this.frames.length;\n\n    // Render the statistics.\n    this.fps.textContent = `\nFrames per Second:\n         latest = ${Math.round(fps)}\navg of last 100 = ${Math.round(mean)}\nmin of last 100 = ${Math.round(min)}\nmax of last 100 = ${Math.round(max)}\n`.trim();\n  }\n};\n\n/* \n * Input setup\n */\n\n// Generation counter\nconst genCounter = document.getElementById(\"gen\");\ngenCounter.textContent = 0;\n\n// File map\nconst mapUpload = document.getElementById(\"map\");\nmapUpload.addEventListener('change', event => {\n  var files = event.target.files; // FileList object\n\n  // use the 1st file from the list\n  let f = files[0];\n\n  var reader = new FileReader();\n\n  // Closure to capture the file information.\n  reader.onload = ((file) => {\n    return function(e) {\n      pause();\n      universe.clear();\n\n      universe.import_file(e.target.result);\n\n      width = universe.width();\n      height = universe.height();\n      // setup canvas\n      canvas.height = (CELL_SIZE + 1) * height + 1;\n      canvas.width = (CELL_SIZE + 1) * width + 1;\n\n      play();\n      pause();\n      \n\n    };\n  })(f);\n\n  // Read in the image file as a data URL.\n  reader.readAsText(f);\n})\n\n// Size\nconst sizeInput = document.getElementById(\"size\");\nsizeInput.value = 64;\n\nsizeInput.addEventListener(\"input\", event => {\n  pause();\n  let newsize = sizeInput.value / 5 + 64;\n\n  // Update canvas\n  width = newsize;\n  height = newsize;\n\n\n  // setup canvas\n  canvas.height = (CELL_SIZE + 1) * height + 1;\n  canvas.width = (CELL_SIZE + 1) * width + 1;\n\n  // Update univsers\n  universe.set_width(newsize);\n  universe.set_height(newsize);\n\n  universe.clear();\n  play();\n  genCounter.value = 0;\n  pause();\n})\n\n\n// Speed slider\nconst speedRange = document.getElementById(\"speed\");\nspeedRange.value = 1;\n\n// Play / Pause button\nconst playPauseButton = document.getElementById(\"play-pause\");\n\nconst play = () => {\n  playPauseButton.textContent = \"⏸\";\n  renderLoop();\n};\n\nconst pause = () => {\n  playPauseButton.textContent = \"▶\";\n  cancelAnimationFrame(animationId);\n  animationId = null;\n};\n\nplayPauseButton.addEventListener(\"click\", event => {\n  if (isPaused()) {\n    play();\n  } else {\n    pause();\n  }\n});\n\n// Clear button\nconst clearButton = document.getElementById(\"clear\");\nclearButton.addEventListener(\"click\", event => {\n  pause();\n  universe.clear();\n  play();\n  pause();\n  genCounter.textContent = 0;\n});\n\n// Random button\nconst randomButton = document.getElementById(\"random\");\nrandomButton.addEventListener(\"click\", event => {\n  pause();\n  universe.random();\n  play();\n  genCounter.textContent = 0;\n\n});\n\n/* \n * Rendering for canvas\n */\n\n// Grab canvas to render on\nlet canvas = document.getElementById(\"game-of-life-canvas\");\n\n// setup canvas\ncanvas.height = (CELL_SIZE + 1) * height + 1;\ncanvas.width = (CELL_SIZE + 1) * width + 1;\n\n// TODO Implement WebGL\nconst ctx = canvas.getContext('2d');\n\ncanvas.addEventListener(\"click\", event => {\n  const boundingRect = canvas.getBoundingClientRect();\n\n  const scaleX = canvas.width / boundingRect.width;\n  const scaleY = canvas.height / boundingRect.height;\n\n  const canvasLeft = (event.clientX - boundingRect.left) * scaleX;\n  const canvasTop = (event.clientY - boundingRect.top) * scaleY;\n\n  const row = Math.min(Math.floor(canvasTop / (CELL_SIZE + 1)), height - 1);\n  const col = Math.min(Math.floor(canvasLeft / (CELL_SIZE + 1)), width - 1);\n\n  if (event.shiftKey) {\n    // Create a glider\n    console.log(\"Glider\")\n    universe.set_cell(row, col, true);\n    universe.set_cell(row, col, false);\n    universe.set_cell(row + 1, col, true);\n    universe.set_cell(row - 1, col, true);\n    universe.set_cell(row, col + 1, true);\n    universe.set_cell(row - 1, col - 1, true);\n    universe.set_cell(row - 1, col + 1, true);\n\n  }\n  else if (event.ctrlKey) {\n    // Create a pulsar\n    console.log(\"Pulsar\")\n    // TODO Implement pulsar\n  }\n  else {\n    // set cell\n    console.log(\"toggle\")\n    universe.toggle_cell(row, col);\n  }\n\n  drawGrid();\n  drawCells();\n});\n\n/*\n * Game code\n */\n\n// Create grid \nconst drawGrid = () => {\n  ctx.beginPath();\n  ctx.strokeStyle = GRID_COLOR;\n\n  // Vertical lines.\n  for (let i = 0; i <= width; i++) {\n    ctx.moveTo(i * (CELL_SIZE + 1) + 1, 0);\n    ctx.lineTo(i * (CELL_SIZE + 1) + 1, (CELL_SIZE + 1) * height + 1);\n  }\n\n  // Horizontal lines.\n  for (let j = 0; j <= height; j++) {\n    ctx.moveTo(0,                           j * (CELL_SIZE + 1) + 1);\n    ctx.lineTo((CELL_SIZE + 1) * width + 1, j * (CELL_SIZE + 1) + 1);\n  }\n\n  ctx.stroke();\n};\n\n\nconst getIndex = (row, column) => {\n  return row * width + column;\n};\n\n\nconst bitIsSet = (n, arr) => {\n  const byte = Math.floor(n / 8);\n  const mask = 1 << (n % 8);\n  return (arr[byte] & mask) === mask;\n};\n\n// Draw cells on canvas\nconst drawCells = () => {\n  const cellsPtr = universe.cells();\n\n  // This is updated!\n  const cells = new Uint8Array(conways_conways_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer, cellsPtr, width * height / 8);\n\n  ctx.beginPath();\n\n  for (let row = 0; row < height; row++) {\n    for (let col = 0; col < width; col++) {\n      const idx = getIndex(row, col);\n\n      // This is updated!\n      ctx.fillStyle = bitIsSet(idx, cells)\n        ? ALIVE_COLOR\n        : DEAD_COLOR;\n\n      ctx.fillRect(\n        col * (CELL_SIZE + 1) + 1,\n        row * (CELL_SIZE + 1) + 1,\n        CELL_SIZE,\n        CELL_SIZE\n      );\n    }\n  }\n\n  // Alive cells.\n  ctx.fillStyle = ALIVE_COLOR;\n  for (let row = 0; row < height; row++) {\n    for (let col = 0; col < width; col++) {\n      const idx = getIndex(row, col);\n      if (!bitIsSet(idx, cells)) {\n        continue;\n      }\n\n      ctx.fillRect(\n        col * (CELL_SIZE + 1) + 1,\n        row * (CELL_SIZE + 1) + 1,\n        CELL_SIZE,\n        CELL_SIZE\n      );\n    }\n  }\n\n  // Dead cells.\n  ctx.fillStyle = DEAD_COLOR;\n  for (let row = 0; row < height; row++) {\n    for (let col = 0; col < width; col++) {\n      const idx = getIndex(row, col);\n      if (bitIsSet(idx,cells)) {\n        continue;\n      }\n\n      ctx.fillRect(\n        col * (CELL_SIZE + 1) + 1,\n        row * (CELL_SIZE + 1) + 1,\n        CELL_SIZE,\n        CELL_SIZE\n      );\n    }\n  }\n  ctx.stroke();\n};\n\n\n// Render loop\nconst renderLoop = () => {\n  fps.render();\n\n  // console.log(speedRange.value / 10);\n  for (let i = 0; i <= speedRange.value / 10; i++) {\n    genCounter.textContent++;\n    // console.log(\"ticking\")\n    universe.tick();\n  }\n  drawGrid();\n  drawCells();\n  animationId = requestAnimationFrame(renderLoop);\n};\n\n\n// Render initial unverse\nplay();\n\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

}]);